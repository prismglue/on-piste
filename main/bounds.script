go.property('height', 50)

local DISPLAY_WIDTH = sys.get_config_number("display.width") or 960
local DISPLAY_HEIGHT = sys.get_config_number("display.height") or 960

--go.property('min_x', 0)
--go.property('max_x', DISPLAY_WIDTH)
-- Learn more: https://defold.com/manuals/script/

function init(self)
	self.max_y = DISPLAY_HEIGHT/3
	self.max_y = self.max_y -- self.height/2
	self.max_x = DISPLAY_WIDTH
	self.min_y = 0
end

function final(self)
end

function update(self, dt)
	-- enforce bounds
	local pos = go.get_position()
	local bounds_changed = false
	if pos.x < 0 then
		pos.x = 0
		bounds_changed = true
	elseif pos.x > self.max_x then
		pos.x = self.max_x
		bounds_changed = true
	end
	if pos.y > self.max_y then
		pos.y = self.max_y
		bounds_changed = true
	elseif pos.y < self.min_y then
		pos.y = self.min_y
		bounds_changed = true
	end

	if bounds_changed then
		go.set_position(pos)
	end
end

function fixed_update(self, dt)
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	self.min_y = 0
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
